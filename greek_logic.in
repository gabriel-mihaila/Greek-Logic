set(arithmetic).
assign(domain_size, 4). %Sunt patru litere grecesti diferite

list(distinct).
	[Sigma, Pi, Lambda, Delta].
end_of_list.

formulas(assumptions).

%Definim valorile posibile ce pot sta in celula
grid(x,y) = Sigma | grid(x,y) = Pi | grid(x,y) = Lambda | grid(x,y) = Delta.

%Definim unicitatea celulei
grid(x,y) = Sigma -> (grid(x,y) != Pi) & (grid(x,y) != Lambda) & (grid(x,y) != Delta).
grid(x,y) = Pi -> (grid(x,y) != Sigma) & (grid(x,y) != Lambda) & (grid(x,y) != Delta).
grid(x,y) = Lambda -> (grid(x,y) != Sigma) & (grid(x,y) != Pi) & (grid(x,y) != Delta).
grid(x,y) = Delta -> (grid(x,y) != Sigma) & (grid(x,y) != Pi) & (grid(x,y) != Lambda).

%Definim valorile urmatoare ce le pot avea x (in jos) si y (la dreapta)
next(0) = 1.
next(1) = 2.
next(2) = 3.
next(3) = 0.

%Definim valorile anterioare ce le pot avea x (in sus) si y (la stanga)
prev(0) = 3.
prev(1) = 0.
prev(2) = 1.
prev(3) = 2.

%Punem regula ca atunci cand avem o litera pe o anumita coloana sa nu mai putem avea aceasi litera pe acea coloana (cand se modifica x)
(grid(x,y) = Sigma) -> ((grid(next(x), y) != Sigma) & (grid(next(next(x)), y) != Sigma) & (grid(next(next(next(x))), y) != Sigma)).
(grid(x,y) = Pi) -> ((grid(next(x), y) != Pi) & (grid(next(next(x)), y) != Pi) & (grid(next(next(next(x))), y) != Pi)).
(grid(x,y) = Lambda) -> ((grid(next(x), y) != Lambda) & (grid(next(next(x)), y) != Lambda) & (grid(next(next(next(x))), y) != Lambda)).
(grid(x,y) = Delta) -> ((grid(next(x), y) != Delta) & (grid(next(next(x)), y) != Delta) & (grid(next(next(next(x))), y) != Delta)).

%Punem regula ca atunci cand avem o litera pe un anumit rand sa nu mai putem avea aceasi litera pe acel rand (cand se modifica y)
(grid(x,y) = Sigma) -> ((grid(x, next(y)) != Sigma) & (grid(x, next(next(y))) != Sigma) & (grid(x, next(next(next(y)))) != Sigma)).
(grid(x,y) = Pi) -> ((grid(x, next(y)) != Pi) & (grid(x, next(next(y))) != Pi) & (grid(x, next(next(next(y)))) != Pi)).
(grid(x,y) = Lambda) -> ((grid(x, next(y)) != Lambda) & (grid(x, next(next(y))) != Lambda) & (grid(x, next(next(next(y)))) != Lambda)).
(grid(x,y) = Delta) -> ((grid(x, next(y)) != Delta) & (grid(x, next(next(y))) != Delta) & (grid(x, next(next(next(y)))) != Delta)).

%Punem regula aditionala daca celula face parte din diagonala principala si are o anumita litera, acea litera nu mai poate sa apara pe diagonala principala
(grid(x,y) = Sigma & (x = y)) -> ((grid(next(x), next(y)) != Sigma) & (grid(next(next(x)), next(next(y))) != Sigma) & (grid(next(next(next(x))), next(next(next(y)))) != Sigma)).
(grid(x,y) = Pi & (x = y)) -> ((grid(next(x), next(y)) != Pi) & (grid(next(next(x)), next(next(y))) != Pi) & (grid(next(next(next(x))), next(next(next(y)))) != Pi)).
(grid(x,y) = Lambda & (x = y)) -> ((grid(next(x), next(y)) != Lambda) & (grid(next(next(x)), next(next(y))) != Lambda) & (grid(next(next(next(x))), next(next(next(y)))) != Lambda)).
(grid(x,y) = Delta & (x = y)) -> ((grid(next(x), next(y)) != Delta) & (grid(next(next(x)), next(next(y))) != Delta) & (grid(next(next(next(x))), next(next(next(y)))) != Delta)).

%Punem regula aditionala daca celula face parte din diagonala secundara si are o anumita litera, acea litera nu mai poate sa apara pe diagonala secundara
(grid(x,y) = Sigma & (x + y = 3)) -> ((grid(next(x), prev(y)) != Sigma) & (grid(next(next(x)), prev(prev(y))) != Sigma) & (grid(next(next(next(x))), prev(prev(prev(y)))) != Sigma)).
(grid(x,y) = Pi & (x + y = 3)) -> ((grid(next(x), prev(y)) != Pi) & (grid(next(next(x)), prev(prev(y))) != Pi) & (grid(next(next(next(x))), prev(prev(prev(y)))) != Pi)).
(grid(x,y) = Lambda & (x + y = 3)) -> ((grid(next(x), prev(y)) != Lambda) & (grid(next(next(x)), prev(prev(y))) != Lambda) & (grid(next(next(next(x))), prev(prev(prev(y)))) != Lambda)).
(grid(x,y) = Delta & (x + y = 3)) -> ((grid(next(x), prev(y)) != Delta) & (grid(next(next(x)), prev(prev(y))) != Delta) & (grid(next(next(next(x))), prev(prev(prev(y)))) != Delta)).

%Definim contextul initial
grid(0,0) = Sigma.
grid(0,1) = Pi.
grid(0,2) = Lambda.
grid(0,3) = Delta.
grid(3,2) = Delta.

end_of_list.
